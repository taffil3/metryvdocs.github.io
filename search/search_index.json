{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MetryV Docs Overview This documentation targets developers in metryv project MetryV is the product name, and the meaning is that metry stands for metrics and v for vitals. We\u2019re focused on solving problems regarding the most vital metrics for better User Experience. By giving the best experience to your users, you get to keep them longer on the site, as a result of which you get more engagement from them, more scrolling, better conversions, and all this meaning more profit. What does Good User Experience mean? Google has defined three core aspects of user experience as vital for web pages. You may know them as Core Web Vitals, which measure loading time of the page, interactivity and also visual stability. Let\u2019s focus for a second on loading time. There is a research done by the All in one SEO tool team, where they found that 40% of users abandon a web page if it takes more than 3 seconds to load. That means that if you have a page that loads very slow, you\u2019re probably losing 40% of your potential clients. It affects the users psychologically by waiting too long that maybe your website is not worth it, they will get bored and just leave the site, even if you have the best SEO campaigns in the world. Another thing that needs to be considered too is that in the past years Google has also started taking into calculation these metrics in their ranking algorithm as well. And that percentage will get higher with time. Now we offer a tool for all of these metrics. With MetryV you can add a site easily by just adding the page url. Monitor web vitals with daily and monthly graphs. Have notifications for metric alerts for Email, Slack or Discord, also you can choose which types of notifications you want. Other cool features like Server Uptime monitoring, w3 validator tool scans and Screenshot Analysis, which takes screenshots hourly of your website to check if there are any significant differences that you need to be worried about.","title":"Overview"},{"location":"#welcome-to-metryv-docs","text":"","title":"Welcome to MetryV Docs"},{"location":"#overview","text":"This documentation targets developers in metryv project MetryV is the product name, and the meaning is that metry stands for metrics and v for vitals. We\u2019re focused on solving problems regarding the most vital metrics for better User Experience. By giving the best experience to your users, you get to keep them longer on the site, as a result of which you get more engagement from them, more scrolling, better conversions, and all this meaning more profit. What does Good User Experience mean? Google has defined three core aspects of user experience as vital for web pages. You may know them as Core Web Vitals, which measure loading time of the page, interactivity and also visual stability. Let\u2019s focus for a second on loading time. There is a research done by the All in one SEO tool team, where they found that 40% of users abandon a web page if it takes more than 3 seconds to load. That means that if you have a page that loads very slow, you\u2019re probably losing 40% of your potential clients. It affects the users psychologically by waiting too long that maybe your website is not worth it, they will get bored and just leave the site, even if you have the best SEO campaigns in the world. Another thing that needs to be considered too is that in the past years Google has also started taking into calculation these metrics in their ranking algorithm as well. And that percentage will get higher with time. Now we offer a tool for all of these metrics. With MetryV you can add a site easily by just adding the page url. Monitor web vitals with daily and monthly graphs. Have notifications for metric alerts for Email, Slack or Discord, also you can choose which types of notifications you want. Other cool features like Server Uptime monitoring, w3 validator tool scans and Screenshot Analysis, which takes screenshots hourly of your website to check if there are any significant differences that you need to be worried about.","title":"Overview"},{"location":"API%27s%20and%20Packages/","text":"API's and Packages (to be continued) EsLint & Prettier ... Google Analytics (GA4) ... Page Speed Insights (PSI) ... Mailjet ... Socket.io ... Jsonwebtoken ... Node-cron ... Material UI ... Redux ...","title":"API's and Packages"},{"location":"API%27s%20and%20Packages/#apis-and-packages-to-be-continued","text":"","title":"API's and Packages (to be continued)"},{"location":"API%27s%20and%20Packages/#eslint-prettier","text":"...","title":"EsLint &amp; Prettier"},{"location":"API%27s%20and%20Packages/#google-analytics-ga4","text":"...","title":"Google Analytics (GA4)"},{"location":"API%27s%20and%20Packages/#page-speed-insights-psi","text":"...","title":"Page Speed Insights (PSI)"},{"location":"API%27s%20and%20Packages/#mailjet","text":"...","title":"Mailjet"},{"location":"API%27s%20and%20Packages/#socketio","text":"...","title":"Socket.io"},{"location":"API%27s%20and%20Packages/#jsonwebtoken","text":"...","title":"Jsonwebtoken"},{"location":"API%27s%20and%20Packages/#node-cron","text":"...","title":"Node-cron"},{"location":"API%27s%20and%20Packages/#material-ui","text":"...","title":"Material UI"},{"location":"API%27s%20and%20Packages/#redux","text":"...","title":"Redux"},{"location":"Docker/","text":"Docker Optionally you can run metryv from docker. First of all install docker on your machine through installation guide on docker documentation. After that you can start pulling metryv images on docker hub Docker hub Docker hub account Username Password Metryv Starlabs123321@ There are eight repositories containing images on dockerhub, commands witten on brackets[ ], are optional Api docker pull [OPTIONS] metryv/api[:TAG|@DIGEST] Psi docker pull [OPTIONS] metryv/psi[:TAG|@DIGEST] Ping docker pull [OPTIONS] metryv/ping[:TAG|@DIGEST] Chat Server docker pull [OPTIONS] metryv/chatbot[:TAG|@DIGEST] Psi-Crons docker pull [OPTIONS] metryv/psi-crons[:TAG|@DIGEST] Api-Crons docker pull [OPTIONS] metryv/api-crons[:TAG|@DIGEST] Suggestions docker pull [OPTIONS] metryv/suggestions[:TAG|@DIGEST] Dashboard docker pull [OPTIONS] metryv/dashboard[:TAG|@DIGEST] Docker Compose Docker compose is used to run Backend part contianing api,psi,chat_server and ping Crons server contianing api-crons and psi-crons, setting the crons variable on .env to \"crons\" Frontend with dashboard and suggestions Docker compose files are in each repo Run this command to build the Docker images: docker-compose up -d --build The data persists since we're using Docker volume (named volume) which is the preferred mechanism for persisting data generated and used by Docker containers, you can the volume created by running this docker command on your machine: docker volume ls To tear down our containers, use docker-compose down: docker-compose down To run the containers again use: docker-compose up -d After you run docker-compose, you can check the project in localhost on your machine. const targetElements = document.getElementsByClassName(\"password\"); for(const element of targetElements){ element.style.filter = \"blur(4px)\"; element.addEventListener(\"click\", (el) => { el.target.style.filter = \"blur(0px)\"; }) }","title":"Docker"},{"location":"Docker/#docker","text":"Optionally you can run metryv from docker. First of all install docker on your machine through installation guide on docker documentation. After that you can start pulling metryv images on docker hub","title":"Docker"},{"location":"Docker/#docker-hub","text":"Docker hub account Username Password Metryv Starlabs123321@ There are eight repositories containing images on dockerhub, commands witten on brackets[ ], are optional Api docker pull [OPTIONS] metryv/api[:TAG|@DIGEST] Psi docker pull [OPTIONS] metryv/psi[:TAG|@DIGEST] Ping docker pull [OPTIONS] metryv/ping[:TAG|@DIGEST] Chat Server docker pull [OPTIONS] metryv/chatbot[:TAG|@DIGEST] Psi-Crons docker pull [OPTIONS] metryv/psi-crons[:TAG|@DIGEST] Api-Crons docker pull [OPTIONS] metryv/api-crons[:TAG|@DIGEST] Suggestions docker pull [OPTIONS] metryv/suggestions[:TAG|@DIGEST] Dashboard docker pull [OPTIONS] metryv/dashboard[:TAG|@DIGEST]","title":"Docker hub"},{"location":"Docker/#docker-compose","text":"Docker compose is used to run Backend part contianing api,psi,chat_server and ping Crons server contianing api-crons and psi-crons, setting the crons variable on .env to \"crons\" Frontend with dashboard and suggestions Docker compose files are in each repo Run this command to build the Docker images: docker-compose up -d --build The data persists since we're using Docker volume (named volume) which is the preferred mechanism for persisting data generated and used by Docker containers, you can the volume created by running this docker command on your machine: docker volume ls To tear down our containers, use docker-compose down: docker-compose down To run the containers again use: docker-compose up -d After you run docker-compose, you can check the project in localhost on your machine. const targetElements = document.getElementsByClassName(\"password\"); for(const element of targetElements){ element.style.filter = \"blur(4px)\"; element.addEventListener(\"click\", (el) => { el.target.style.filter = \"blur(0px)\"; }) }","title":"Docker Compose"},{"location":"MetryV%20Info/","text":"MetryV Info Credentials Server Credentials Enviroment User Password Cron root Z4hK^VACa@cJbXY@z5h5g6aHzn Dev Backend root 8z%5TZF#2ZEeq5a7D$n7JG^Io9 Dev Frontend root dYIIx@fdc$8N^P&L#lk1i\\*Dy^8 Live Backend root !8iDGTv&K2Lp#^S&bwsiyXx9co Live Frontend root 3z50J^Mu2fDiZYtBP7Z#OHM@^9 Users and Passwords Enviroment User Password HTTP Authentication nehar F8oTI4aL5Aty1qoD3tgisgnf Wordpress metryv 8SWIF5e)7JUwXVgZFtWrmLPi Docker Hub Metryv Starlabs123321@ Dashboard Dev nehar@gmail.com nehari123 Dashboard metricsvitals@gmail.com MetryV!@#123. Suggestions nehar F8oTI4aL5Aty1qoD3tgisgnf Logs neharjashari `vfb'CXz?$ApX4D[96%/ Mailjet metryv@starlabspro.com M3tryV123! Email metryv@starlabspro.com B@bloki17051998! Gmail metricsvitals@gmail.com #MetryV!@#123. CloudFlare metryv@starlabspro.com T%swWPRN2Yu2 Branch Naming Convention Please use the following convention when naming a branch, so that is easier for us to track changes and for you to save versions of code. <author>_<branch-type>_<branch-name> The branch-type can be one of these: feat must be used when a branch adds a new feature to the component. fix must be used to denote branch that fix specific bugs in the component. chore identifies branch composed of only housekeeping tasks such as cleanup, merges, ... doc identifies branch representing documentation activities The branch_name can be the name of the feature, fix, etc. Commit Convention There is no globally accepted standard or a one-size-fits-all convention for git commits but when pushing to master we chose to adopt the guidelines of Conventional-Commits . When creating a PR to master branch keep in mind that the commit should follow the type description guide below, and also you have remember to select Squash and Merge option when merging to master. Type Descriptor: The type descriptor should be a noun specifying the class/category of actions the commits belong to; as recommended from the conventional-commits specification sheet: feat: must be used when a commit adds a new feature to the component. fix: must be used to denote commits that fix specific bugs in the component. chore: identifies commits composed of only housekeeping tasks such as cleanup, merges, ... doc: identifies commits representing documentation activities A quick example: fix: set correct i18n key in object edit dialog References Running Node & MongoDB with Docker Compose User Authentication Reference Dashboard UI Template Domains Wordpress DEV: https://dev.metryv.com/ Dashboard DEV: https://dev-dashboard.metryv.com/ Suggestions DEV: https://dev-suggestions-dashboard.metryv.com/ Wordpress: https://metryv.com/ Dashboard: https://dashboard.metryv.com/ Suggestions: https://suggestions-dashboard.metryv.com/ Logs: http://logs-dashboard.metryv.com/ Bookmarks Gitlab: https://gitlab.com/metryv Atlassian: https://metryv.atlassian.net/ Jira: https://metryv.atlassian.net/jira/software/c/projects/MET/boards/2 Figma: https://www.figma.com/file/JhHeTsPjpkQotjjiM3f5SS/MetryV?node-id=0%3A1 Pricing: https://docs.google.com/spreadsheets/d/1noBZmUKcUcX-8O854v-YAWbYeXbkoUEzsXq7qjUJv4A/edit?usp=sharing Documentation on psi: https://docs-performance.starlabs.dev/ - starlabs/giggity GA Property Id: 310384601 Social Media Facebook: https://www.facebook.com/metryV LinkedIn: https://www.linkedin.com/company/metryv Instagram: https://www.instagram.com/metry.v/ Twitter: https://twitter.com/metry_v Tiktok: https://www.tiktok.com/@metryv const targetElements = document.getElementsByClassName(\"password\"); for(const element of targetElements){ element.style.filter = \"blur(4px)\"; element.addEventListener(\"click\", (el) => { el.target.style.filter = \"blur(0px)\"; }) }","title":"MetryV Info"},{"location":"MetryV%20Info/#metryv-info","text":"","title":"MetryV Info"},{"location":"MetryV%20Info/#credentials","text":"","title":"Credentials"},{"location":"MetryV%20Info/#server-credentials","text":"Enviroment User Password Cron root Z4hK^VACa@cJbXY@z5h5g6aHzn Dev Backend root 8z%5TZF#2ZEeq5a7D$n7JG^Io9 Dev Frontend root dYIIx@fdc$8N^P&L#lk1i\\*Dy^8 Live Backend root !8iDGTv&K2Lp#^S&bwsiyXx9co Live Frontend root 3z50J^Mu2fDiZYtBP7Z#OHM@^9","title":"Server Credentials"},{"location":"MetryV%20Info/#users-and-passwords","text":"Enviroment User Password HTTP Authentication nehar F8oTI4aL5Aty1qoD3tgisgnf Wordpress metryv 8SWIF5e)7JUwXVgZFtWrmLPi Docker Hub Metryv Starlabs123321@ Dashboard Dev nehar@gmail.com nehari123 Dashboard metricsvitals@gmail.com MetryV!@#123. Suggestions nehar F8oTI4aL5Aty1qoD3tgisgnf Logs neharjashari `vfb'CXz?$ApX4D[96%/ Mailjet metryv@starlabspro.com M3tryV123! Email metryv@starlabspro.com B@bloki17051998! Gmail metricsvitals@gmail.com #MetryV!@#123. CloudFlare metryv@starlabspro.com T%swWPRN2Yu2","title":"Users and Passwords"},{"location":"MetryV%20Info/#branch-naming-convention","text":"Please use the following convention when naming a branch, so that is easier for us to track changes and for you to save versions of code. <author>_<branch-type>_<branch-name> The branch-type can be one of these: feat must be used when a branch adds a new feature to the component. fix must be used to denote branch that fix specific bugs in the component. chore identifies branch composed of only housekeeping tasks such as cleanup, merges, ... doc identifies branch representing documentation activities The branch_name can be the name of the feature, fix, etc.","title":"Branch Naming Convention"},{"location":"MetryV%20Info/#commit-convention","text":"There is no globally accepted standard or a one-size-fits-all convention for git commits but when pushing to master we chose to adopt the guidelines of Conventional-Commits . When creating a PR to master branch keep in mind that the commit should follow the type description guide below, and also you have remember to select Squash and Merge option when merging to master.","title":"Commit Convention"},{"location":"MetryV%20Info/#type-descriptor","text":"The type descriptor should be a noun specifying the class/category of actions the commits belong to; as recommended from the conventional-commits specification sheet: feat: must be used when a commit adds a new feature to the component. fix: must be used to denote commits that fix specific bugs in the component. chore: identifies commits composed of only housekeeping tasks such as cleanup, merges, ... doc: identifies commits representing documentation activities A quick example: fix: set correct i18n key in object edit dialog","title":"Type Descriptor:"},{"location":"MetryV%20Info/#references","text":"Running Node & MongoDB with Docker Compose User Authentication Reference Dashboard UI Template","title":"References"},{"location":"MetryV%20Info/#domains","text":"Wordpress DEV: https://dev.metryv.com/ Dashboard DEV: https://dev-dashboard.metryv.com/ Suggestions DEV: https://dev-suggestions-dashboard.metryv.com/ Wordpress: https://metryv.com/ Dashboard: https://dashboard.metryv.com/ Suggestions: https://suggestions-dashboard.metryv.com/ Logs: http://logs-dashboard.metryv.com/","title":"Domains"},{"location":"MetryV%20Info/#bookmarks","text":"Gitlab: https://gitlab.com/metryv Atlassian: https://metryv.atlassian.net/ Jira: https://metryv.atlassian.net/jira/software/c/projects/MET/boards/2 Figma: https://www.figma.com/file/JhHeTsPjpkQotjjiM3f5SS/MetryV?node-id=0%3A1 Pricing: https://docs.google.com/spreadsheets/d/1noBZmUKcUcX-8O854v-YAWbYeXbkoUEzsXq7qjUJv4A/edit?usp=sharing Documentation on psi: https://docs-performance.starlabs.dev/ - starlabs/giggity GA Property Id: 310384601","title":"Bookmarks"},{"location":"MetryV%20Info/#social-media","text":"Facebook: https://www.facebook.com/metryV LinkedIn: https://www.linkedin.com/company/metryv Instagram: https://www.instagram.com/metry.v/ Twitter: https://twitter.com/metry_v Tiktok: https://www.tiktok.com/@metryv const targetElements = document.getElementsByClassName(\"password\"); for(const element of targetElements){ element.style.filter = \"blur(4px)\"; element.addEventListener(\"click\", (el) => { el.target.style.filter = \"blur(0px)\"; }) }","title":"Social Media"},{"location":"On%20Release/","text":"Release","title":"On Release"},{"location":"On%20Release/#release","text":"","title":"Release"},{"location":"Running%20the%20project/","text":"Running the project Npm MetryV Back There are four microservices and you should run them seperatly with npm. First you'll need to install all npm install packages on all four services by running npm install than you'll start the servers by running npm start that will run the command declared on package.json for each microservice Local \"start\": \"nodemon index.js\" Development \"start:development\": \"NODE_ENV=development node --max-old-space-size=4096 index.js\" Production \"start:production\": \"NODE_ENV=production node --max-old-space-size=4096 index.js\" Crons \"start:crons\": \"NODE_ENV=crons node --max-old-space-size=4096 index.js\" nodemon: is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected. NODE_ENV: will declare the node_env variable on .env file --max-old-space-size: By default, the memory limit in Node. js is 512 MB. To increase this amount, you need to set the memory limit argument \u2014-max-old-space-size . It will help avoid a memory limit issue. --no-warnings: disables warnings in node js This command will start the backend of metryv on your machine. Ports and env variables are specified on the table below for each enviroment Service Local Development Production API http://localhost:3001/api https://backend-dev.metryv.com/api https://backend-dashboard.metryv.com/api PSI http://localhost:3002/psi https://backend-dev.metryv.com/psi https://backend-dashboard.metryv.com/psi CHAT SERVER http://localhost:3004/chat https://backend-dev.metryv.com/chat https://backend-dashboard.metryv.com/chat PING http://localhost:3005/ping https://backend-dev.metryv.com/ping https://backend-dashboard.metryv.com/ping MetryV Front There are two services and you should run them seperatly with npm. First you will need to npm install all npm packages each service by running npm install than you'll start dashboard and suggestions by running npm start that will run the command decalred on package.json for suggestions and dashboard Local \"start\": \"env-cmd -f .env.local react-scripts start\" Development \"start:development\": \"env-cmd -f .env.development react-scripts start\" Production \"start:production\": \"env-cmd -f .env.production react-scripts start\" env-cmd -f .env.local|development|production: A simple node program for executing commands using an environment from an env file. -f determines which file These commands will start the front metryv on your machine. Ports and env variables are specified on the table below for each container Service Local Development Production DASHBOARD http://localhost:3000/ https://dev-dashboard.metryv.com/ https://dashboard.metryv.com/ SUGGESTIONS http://localhost:3003/ https://dev-suggestions.metryv.com/ https://suggestions.metryv.com/ Xamp Run xamp and click on start all to be able to use metryv payments locally or metryv landing page Service Local Development Production PAYMENTS http://localhost/payment/ https://metryv.com/payment/ METRYV http://localhost/metryv/ https://metryv.com/","title":"Running the project"},{"location":"Running%20the%20project/#running-the-project","text":"","title":"Running the project"},{"location":"Running%20the%20project/#npm","text":"","title":"Npm"},{"location":"Running%20the%20project/#metryv-back","text":"There are four microservices and you should run them seperatly with npm. First you'll need to install all npm install packages on all four services by running npm install than you'll start the servers by running npm start that will run the command declared on package.json for each microservice Local \"start\": \"nodemon index.js\" Development \"start:development\": \"NODE_ENV=development node --max-old-space-size=4096 index.js\" Production \"start:production\": \"NODE_ENV=production node --max-old-space-size=4096 index.js\" Crons \"start:crons\": \"NODE_ENV=crons node --max-old-space-size=4096 index.js\" nodemon: is a tool that helps develop Node.js based applications by automatically restarting the node application when file changes in the directory are detected. NODE_ENV: will declare the node_env variable on .env file --max-old-space-size: By default, the memory limit in Node. js is 512 MB. To increase this amount, you need to set the memory limit argument \u2014-max-old-space-size . It will help avoid a memory limit issue. --no-warnings: disables warnings in node js This command will start the backend of metryv on your machine. Ports and env variables are specified on the table below for each enviroment Service Local Development Production API http://localhost:3001/api https://backend-dev.metryv.com/api https://backend-dashboard.metryv.com/api PSI http://localhost:3002/psi https://backend-dev.metryv.com/psi https://backend-dashboard.metryv.com/psi CHAT SERVER http://localhost:3004/chat https://backend-dev.metryv.com/chat https://backend-dashboard.metryv.com/chat PING http://localhost:3005/ping https://backend-dev.metryv.com/ping https://backend-dashboard.metryv.com/ping","title":"MetryV Back"},{"location":"Running%20the%20project/#metryv-front","text":"There are two services and you should run them seperatly with npm. First you will need to npm install all npm packages each service by running npm install than you'll start dashboard and suggestions by running npm start that will run the command decalred on package.json for suggestions and dashboard Local \"start\": \"env-cmd -f .env.local react-scripts start\" Development \"start:development\": \"env-cmd -f .env.development react-scripts start\" Production \"start:production\": \"env-cmd -f .env.production react-scripts start\" env-cmd -f .env.local|development|production: A simple node program for executing commands using an environment from an env file. -f determines which file These commands will start the front metryv on your machine. Ports and env variables are specified on the table below for each container Service Local Development Production DASHBOARD http://localhost:3000/ https://dev-dashboard.metryv.com/ https://dashboard.metryv.com/ SUGGESTIONS http://localhost:3003/ https://dev-suggestions.metryv.com/ https://suggestions.metryv.com/","title":"MetryV Front"},{"location":"Running%20the%20project/#xamp","text":"Run xamp and click on start all to be able to use metryv payments locally or metryv landing page Service Local Development Production PAYMENTS http://localhost/payment/ https://metryv.com/payment/ METRYV http://localhost/metryv/ https://metryv.com/","title":"Xamp"},{"location":"Setting%20up%20the%20project/","text":"Setting up the project Tech Stack The technology stack used in metryv is mostly MERN Stack (MongoDB, Express.js, React.js, Node.js). MongoDB is used as a database where all the data is stored, it consists of 9 collections. We use seperate databases for live and development enviroments. Node.js a javascript runtime enviroment and Express.js framework are used in the backend part of this application with microservice architecture. React.js a javascript library is used on frontend togethere with a template Shards Dashboard Lite React and React Redux Core a state managment tool. On payments metryv uses a library by paysera: webtopay created with PHP and the metryv landing page metryv.com is created with wordpress/PHP . Docker is used to create containers along with docker-compose to start all of the containers Node js & npm First thing you will need to do is installing node.js on your machine [ node 16.13.0 or later LTS versions], along with installing nodejs you will also need npm package manger tool to install the project dependecies Xamp and Worpress Install Xamp version 8.0.18-0 and Wrodpress to run landing page metryv.com and payments service on backend After git cloning payments and landing page, save their folders on /opt/lampp/htdocs and rename them to payment and metryv. Gitlab Repos There are four git repos of metryv MetryV Back git clone https://gitlab.com/metryv/metryv-back.git MetryV Front git clone https://gitlab.com/metryv/metryv-front.git MetryV Payments git clone https://gitlab.com/metryv/metryv-payments.git MetryV Wordpress git clone https://gitlab.com/metryv/metryv-wordpress.git Enviroments Besides local enviroment on frontend, backend, payments and metryv landing page there are these enviroments included Project ENV 1 ENV 2 ENV 3 ENV 4 Backend Local Development Production Crons Frontend Local Development Production Payments Local Production Metryv - Landing Page Local Development Production","title":"Setting up the project"},{"location":"Setting%20up%20the%20project/#setting-up-the-project","text":"","title":"Setting up the project"},{"location":"Setting%20up%20the%20project/#tech-stack","text":"The technology stack used in metryv is mostly MERN Stack (MongoDB, Express.js, React.js, Node.js). MongoDB is used as a database where all the data is stored, it consists of 9 collections. We use seperate databases for live and development enviroments. Node.js a javascript runtime enviroment and Express.js framework are used in the backend part of this application with microservice architecture. React.js a javascript library is used on frontend togethere with a template Shards Dashboard Lite React and React Redux Core a state managment tool. On payments metryv uses a library by paysera: webtopay created with PHP and the metryv landing page metryv.com is created with wordpress/PHP . Docker is used to create containers along with docker-compose to start all of the containers","title":"Tech Stack"},{"location":"Setting%20up%20the%20project/#node-js-npm","text":"First thing you will need to do is installing node.js on your machine [ node 16.13.0 or later LTS versions], along with installing nodejs you will also need npm package manger tool to install the project dependecies","title":"Node js &amp; npm"},{"location":"Setting%20up%20the%20project/#xamp-and-worpress","text":"Install Xamp version 8.0.18-0 and Wrodpress to run landing page metryv.com and payments service on backend After git cloning payments and landing page, save their folders on /opt/lampp/htdocs and rename them to payment and metryv.","title":"Xamp and Worpress"},{"location":"Setting%20up%20the%20project/#gitlab-repos","text":"There are four git repos of metryv MetryV Back git clone https://gitlab.com/metryv/metryv-back.git MetryV Front git clone https://gitlab.com/metryv/metryv-front.git MetryV Payments git clone https://gitlab.com/metryv/metryv-payments.git MetryV Wordpress git clone https://gitlab.com/metryv/metryv-wordpress.git","title":"Gitlab Repos"},{"location":"Setting%20up%20the%20project/#enviroments","text":"Besides local enviroment on frontend, backend, payments and metryv landing page there are these enviroments included Project ENV 1 ENV 2 ENV 3 ENV 4 Backend Local Development Production Crons Frontend Local Development Production Payments Local Production Metryv - Landing Page Local Development Production","title":"Enviroments"}]}